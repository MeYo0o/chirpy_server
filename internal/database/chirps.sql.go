// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: chirps.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createChirpy = `-- name: CreateChirpy :one
INSERT INTO chirps(id, body, user_id, created_at, updated_at)
VALUES($1, $2, $3, $4, $5)
RETURNING id, body, user_id, created_at, updated_at
`

type CreateChirpyParams struct {
	ID        uuid.UUID
	Body      string
	UserID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateChirpy(ctx context.Context, arg CreateChirpyParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, createChirpy,
		arg.ID,
		arg.Body,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteChirp = `-- name: DeleteChirp :exec
DELETE FROM chirps
WHERE id = $1
  AND user_id = $2
`

type DeleteChirpParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteChirp(ctx context.Context, arg DeleteChirpParams) error {
	_, err := q.db.ExecContext(ctx, deleteChirp, arg.ID, arg.UserID)
	return err
}

const getChirps = `-- name: GetChirps :many
SELECT id, body, user_id, created_at, updated_at
FROM chirps
ORDER BY created_at ASC
`

func (q *Queries) GetChirps(ctx context.Context) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getChirps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChirpy = `-- name: GetChirpy :one
SELECT id, body, user_id, created_at, updated_at
From chirps
WHERE id = $1
`

func (q *Queries) GetChirpy(ctx context.Context, id uuid.UUID) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, getChirpy, id)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChirpyByUserID = `-- name: GetChirpyByUserID :one
SELECT id, body, user_id, created_at, updated_at
FROM chirps
WHERE id = $1
  AND user_id = $2
`

type GetChirpyByUserIDParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) GetChirpyByUserID(ctx context.Context, arg GetChirpyByUserIDParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, getChirpyByUserID, arg.ID, arg.UserID)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
